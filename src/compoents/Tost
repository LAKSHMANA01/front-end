import React, { useState, useEffect } from 'react';
import { Alert, AlertDescription } from '@/components/ui/alert';

// This would typically come from props in a real application
const mockHazards = [
  {
    _id: '1',
    hazardType: 'Electrical',
    description: 'Exposed wiring in main corridor',
    riskLevel: 'High',
    address: '123 Main St, Floor 2',
    pincode: '12345',
    createdAt: '2024-02-10T10:00:00Z'
  },
  {
    _id: '2',
    hazardType: 'Chemical',
    description: 'Chemical spill in laboratory',
    riskLevel: 'Medium',
    address: '456 Lab Ave',
    pincode: '12346',
    createdAt: '2024-02-11T09:00:00Z'
  }
];

const EngineerDashboard = ({ 
  onUpdate = async () => {}, 
  onDelete = async () => {}, 
  onAddNew = () => {}
}) => {
  // Local state
  const [hazards, setHazards] = useState(mockHazards);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  const [updateFormData, setUpdateFormData] = useState({
    hazardType: '',
    description: '',
    riskLevel: '',
    address: '',
    pincode: ''
  });
  
  // Risk level badge colors
  const getRiskLevelColor = (level) => {
    const colors = {
      'High': 'bg-red-100 text-red-800',
      'Medium': 'bg-yellow-100 text-yellow-800',
      'Low': 'bg-green-100 text-green-800'
    };
    return colors[level] || 'bg-gray-100 text-gray-800';
  };

  // Handle opening view modal
  const handleViewTask = (task) => {
    setSelectedTask(task);
    setIsViewModalOpen(true);
  };

  // Handle opening update modal
  const handleOpenUpdateModal = (task) => {
    setUpdateFormData({
      hazardType: task.hazardType,
      description: task.description,
      riskLevel: task.riskLevel,
      address: task.address,
      pincode: task.pincode
    });
    setSelectedTask(task);
    setIsViewModalOpen(false);
    setIsUpdateModalOpen(true);
  };

  // Handle form input changes
  const handleUpdateInputChange = (e) => {
    const { name, value } = e.target;
    setUpdateFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle update submission
  const handleUpdateSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      await onUpdate({ 
        id: selectedTask._id,
        ...updateFormData
      });
      // Optimistically update the local state
      setHazards(prev => prev.map(hazard => 
        hazard._id === selectedTask._id 
          ? { ...hazard, ...updateFormData }
          : hazard
      ));
      setIsUpdateModalOpen(false);
    } catch (err) {
      setError('Failed to update hazard');
    } finally {
      setLoading(false);
    }
  };

  // Handle delete
  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this hazard?')) {
      setLoading(true);
      try {
        await onDelete(id);
        // Optimistically update the local state
        setHazards(prev => prev.filter(hazard => hazard._id !== id));
        setIsViewModalOpen(false);
      } catch (err) {
        setError('Failed to delete hazard');
      } finally {
        setLoading(false);
      }
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      {/* Header Section */}
      <div className="mb-8 flex justify-between items-center bg-white rounded-lg shadow-sm p-6">
        <h1 className="text-3xl font-bold text-gray-800">Hazards Dashboard</h1>
        <button 
          onClick={onAddNew}
          className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors duration-200 flex items-center gap-2"
        >
          <span>+ Add New Hazard</span>
        </button>
      </div>

      {/* Error Alert */}
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Hazards Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {loading ? (
          <div className="col-span-full text-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          </div>
        ) : hazards.length > 0 ? (
          hazards.map((ticket) => (
            <div 
              key={ticket._id}
              className="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden cursor-pointer"
              onClick={() => handleViewTask(ticket)}
            >
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <h3 className="text-xl font-semibold text-gray-800">{ticket.hazardType}</h3>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getRiskLevelColor(ticket.riskLevel)}`}>
                    {ticket.riskLevel}
                  </span>
                </div>
                <p className="text-gray-600 mb-4 line-clamp-3">{ticket.description}</p>
                <div className="flex justify-between items-center text-sm text-gray-500">
                  <span>{ticket.pincode}</span>
                  <span>{new Date(ticket.createdAt).toLocaleDateString()}</span>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div className="col-span-full text-center py-12 text-gray-500">
            No hazards found. Create a new one to get started.
          </div>
        )}
      </div>

      {/* View Modal */}
      {isViewModalOpen && selectedTask && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white rounded-lg w-full max-w-2xl m-4 p-6 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-start mb-6">
              <h2 className="text-2xl font-bold text-gray-800">{selectedTask.hazardType}</h2>
              <button 
                onClick={() => setIsViewModalOpen(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                ✕
              </button>
            </div>

            <div className="space-y-6">
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-700 mb-2">Risk Level</h4>
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${getRiskLevelColor(selectedTask.riskLevel)}`}>
                  {selectedTask.riskLevel}
                </span>
              </div>

              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-700 mb-2">Description</h4>
                <p className="text-gray-600">{selectedTask.description}</p>
              </div>

              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-700 mb-2">Location Details</h4>
                <p className="text-gray-600 mb-2">{selectedTask.address}</p>
                <p className="text-gray-600">Pincode: {selectedTask.pincode}</p>
              </div>

              <div className="flex justify-between gap-4">
                <button
                  onClick={() => handleOpenUpdateModal(selectedTask)}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg transition-colors duration-200"
                >
                  Update Hazard
                </button>
                <button
                  onClick={() => handleDelete(selectedTask._id)}
                  className="flex-1 bg-red-600 hover:bg-red-700 text-white py-2 rounded-lg transition-colors duration-200"
                >
                  Delete Hazard
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Update Modal */}
      {isUpdateModalOpen && selectedTask && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white rounded-lg w-full max-w-2xl m-4 p-6 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-start mb-6">
              <h2 className="text-2xl font-bold text-gray-800">Update Hazard</h2>
              <button 
                onClick={() => setIsUpdateModalOpen(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                ✕
              </button>
            </div>

            <form onSubmit={handleUpdateSubmit} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Hazard Type
                </label>
                <input
                  type="text"
                  name="hazardType"
                  value={updateFormData.hazardType}
                  onChange={handleUpdateInputChange}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Description
                </label>
                <textarea
                  name="description"
                  value={updateFormData.description}
                  onChange={handleUpdateInputChange}
                  rows="4"
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Risk Level
                </label>
                <select
                  name="riskLevel"
                  value={updateFormData.riskLevel}
                  onChange={handleUpdateInputChange}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                >
                  <option value="">Select Risk Level</option>
                  <option value="Low">Low</option>
                  <option value="Medium">Medium</option>
                  <option value="High">High</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Address
                </label>
                <textarea
                  name="address"
                  value={updateFormData.address}
                  onChange={handleUpdateInputChange}
                  rows="3"
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Pincode
                </label>
                <input
                  type="text"
                  name="pincode"
                  value={updateFormData.pincode}
                  onChange={handleUpdateInputChange}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>

              <div className="flex justify-end gap-4">
                <button
                  type="button"
                  onClick={() => setIsUpdateModalOpen(false)}
                  className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
                >
                  Update Hazard
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default EngineerDashboard;

////////////////////////////////////////////////////////////////
import React, { useState } from 'react';
import { Alert, AlertDescription } from '@/components/ui/alert';

const EngineerDashboard = ({ 
  hazards = [], 
  onUpdate = async () => {}, 
  onDelete = async () => {}, 
  onAddNew = () => {} 
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  const [error, setError] = useState(null);
  const [updateFormData, setUpdateFormData] = useState({
    hazardType: '',
    description: '',
    riskLevel: '',
    address: '',
    pincode: ''
  });

  const handleTaskClick = (task) => {
    setSelectedTask(task);
    setIsModalOpen(true);
  };

  const handleUpdateClick = (task) => {
    setSelectedTask(task);
    setUpdateFormData({
      hazardType: task.hazardType,
      description: task.description,
      riskLevel: task.riskLevel,
      address: task.address,
      pincode: task.pincode
    });
    setIsUpdateModalOpen(true);
    setIsModalOpen(false);
  };

  const handleDeleteClick = async (taskId) => {
    if (window.confirm('Are you sure you want to delete this hazard?')) {
      try {
        await onDelete(taskId);
      } catch (error) {
        setError('Failed to delete hazard');
      }
    }
  };

  const handleUpdateSubmit = async (e) => {
    e.preventDefault();
    try {
      await onUpdate({
        id: selectedTask._id,
        ...updateFormData
      });
      setIsUpdateModalOpen(false);
    } catch (error) {
      setError('Failed to update hazard');
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUpdateFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="min-h-screen bg-slate-100">
      {/* Header */}
      <div className="bg-white shadow-md p-6 mb-6">
        <div className="flex justify-between items-center max-w-7xl mx-auto">
          <h1 className="text-3xl font-bold text-gray-800">Hazards Tasks</h1>
          <button 
            onClick={onAddNew}
            className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg transition-all"
          >
            Add Hazards
          </button>
        </div>
      </div>

      {/* Error Alert */}
      {error && (
        <div className="max-w-7xl mx-auto px-4 mb-6">
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </div>
      )}

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {hazards.map((ticket) => (
            <div 
              key={ticket._id} 
              onClick={() => handleTaskClick(ticket)}
              className="bg-white rounded-lg shadow-md hover:shadow-lg transition-all cursor-pointer"
            >
              <div className="p-6">
                <h3 className="text-xl font-semibold text-gray-800 mb-3">{ticket.hazardType}</h3>
                <p className="text-gray-600 mb-4">{ticket.description}</p>
                <div className="flex justify-between items-center">
                  <span className={`px-3 py-1 rounded-full text-sm ${
                    ticket.riskLevel === 'High' ? 'bg-red-100 text-red-800' :
                    ticket.riskLevel === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {ticket.riskLevel}
                  </span>
                  <span className="text-gray-500">{ticket.pincode}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* View Modal */}
      {isModalOpen && selectedTask && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg w-full max-w-2xl">
            <div className="p-6">
              <div className="flex justify-between items-start mb-6">
                <h2 className="text-2xl font-bold text-gray-800">{selectedTask.hazardType}</h2>
                <button 
                  onClick={() => setIsModalOpen(false)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  ✕
                </button>
              </div>

              <div className="space-y-4 mb-6">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <h4 className="font-medium mb-2">Risk Level</h4>
                  <span className={`px-3 py-1 rounded-full text-sm ${
                    selectedTask.riskLevel === 'High' ? 'bg-red-100 text-red-800' :
                    selectedTask.riskLevel === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {selectedTask.riskLevel}
                  </span>
                </div>

                <div className="bg-gray-50 p-4 rounded-lg">
                  <h4 className="font-medium mb-2">Description</h4>
                  <p className="text-gray-600">{selectedTask.description}</p>
                </div>

                <div className="bg-gray-50 p-4 rounded-lg">
                  <h4 className="font-medium mb-2">Address</h4>
                  <p className="text-gray-600">{selectedTask.address}</p>
                  <p className="text-gray-600 mt-2">Pincode: {selectedTask.pincode}</p>
                </div>
              </div>

              <div className="flex justify-between gap-4">
                <button
                  onClick={() => handleUpdateClick(selectedTask)}
                  className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg transition-colors"
                >
                  Update Hazard
                </button>
                <button
                  onClick={() => handleDeleteClick(selectedTask._id)}
                  className="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg transition-colors"
                >
                  Delete Hazard
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Update Modal */}
      {isUpdateModalOpen && selectedTask && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg w-full max-w-2xl">
            <div className="p-6">
              <div className="flex justify-between items-start mb-6">
                <h2 className="text-2xl font-bold text-gray-800">Update Hazard</h2>
                <button 
                  onClick={() => setIsUpdateModalOpen(false)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  ✕
                </button>
              </div>

              <form onSubmit={handleUpdateSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Hazard Type
                  </label>
                  <input
                    type="text"
                    name="hazardType"
                    value={updateFormData.hazardType}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Description
                  </label>
                  <textarea
                    name="description"
                    value={updateFormData.description}
                    onChange={handleInputChange}
                    rows="4"
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Risk Level
                  </label>
                  <select
                    name="riskLevel"
                    value={updateFormData.riskLevel}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    required
                  >
                    <option value="">Select Risk Level</option>
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Address
                  </label>
                  <textarea
                    name="address"
                    value={updateFormData.address}
                    onChange={handleInputChange}
                    rows="3"
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Pincode
                  </label>
                  <input
                    type="text"
                    name="pincode"
                    value={updateFormData.pincode}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div className="flex justify-end gap-4 mt-6">
                  <button
                    type="button"
                    onClick={() => setIsUpdateModalOpen(false)}
                    className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg"
                  >
                    Update Hazard
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EngineerDashboard;